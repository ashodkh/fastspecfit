#!/usr/bin/env python
"""
MPI wrapper for fastphot and fastspec.

mpi-fastspecfit --mp 32 --coadd-type cumulative --tile 80608 --night 20201220 --plan --nompi
mpi-fastspecfit --fastphot --mp 32 --tile 80608

mpi-fastspecfit --specprod fuji
mpi-fastspecfit --specprod fuji --fastphot

mpi-fastspecfit --merge --specprod fuji
mpi-fastspecfit --merge --specprod fuji --fastphot

mpi-fastspecfit --mp 32 --makeqa --specprod fuji --dry-run
mpi-fastspecfit --mp 32 --makeqa --specprod fuji --fastphot --dry-run

"""
import pdb # for debugging

import os, time
import numpy as np

from desiutil.log import get_logger
log = get_logger()

def run_fastspecfit(args, comm=None, fastphot=False, specprod_dir=None,
                    makeqa=False, outdir_data='.', outdir_html='.'):

    import sys, subprocess
    from fastspecfit.mpi import backup_logs, plan

    if comm is None:
        rank, size = 0, 1
    else:
        rank, size = comm.rank, comm.size

    t0 = time.time()
    if rank == 0:
        #log.info('Starting at {}'.format(time.asctime()))
        _, zbestfiles, outfiles, groups, ntargets = plan(
            comm=comm, specprod=args.specprod, specprod_dir=specprod_dir,
            coadd_type=args.coadd_type, survey=args.survey, program=args.program,
            healpix=args.healpix, tile=args.tile, night=args.night,
            makeqa=args.makeqa, mp=args.mp,
            fastphot=fastphot, outdir_data=outdir_data, outdir_html=outdir_html,
            overwrite=args.overwrite)
        log.info('Planning took {:.2f} sec'.format(time.time() - t0))
    else:
        zbestfiles, outfiles, groups, ntargets = [], [], [], []

    if comm:
        zbestfiles = comm.bcast(zbestfiles, root=0)
        outfiles = comm.bcast(outfiles, root=0)
        groups = comm.bcast(groups, root=0)
        ntargets = comm.bcast(ntargets, root=0)

    #if comm:
    #    comm.barrier()
    sys.stdout.flush()
    
    # all done
    if len(zbestfiles) == 0:
        return
        
    assert(len(groups) == size)
    assert(len(np.concatenate(groups)) == len(zbestfiles))

    #pixels = np.array([int(os.path.basename(os.path.dirname(x))) for x in zbestfiles])
    for ii in groups[rank]:
        log.debug('Rank {} started at {}'.format(rank, time.asctime()))
        sys.stdout.flush()

        # With --makeqa the desired output directories are in the 'zbestfiles'.
        if args.makeqa:
            cmd = 'fastspecfit-qa {} -o {} --mp {}'.format(outfiles[ii], zbestfiles[ii], args.mp)
            if args.ntargets:
                cmd += ' --ntargets {}'.format(args.ntargets)
        else:
            if fastphot:
                cmd = 'fastphot {} -o {} --mp {}'.format(zbestfiles[ii], outfiles[ii], args.mp)
            else:
                cmd = 'fastspec {} -o {} --mp {}'.format(zbestfiles[ii], outfiles[ii], args.mp)
                    
            if args.ntargets is not None:
                cmd += ' --ntargets {}'.format(args.ntargets)
                
            if args.targetids is not None:
                cmd += ' --targetids {}'.format(args.targetids)
                
            if args.ignore_quasarnet is not None:
                cmd += ' --ignore-quasarnet'
                
        if args.makeqa:
            logfile = os.path.join(zbestfiles[ii], os.path.basename(outfiles[ii]).replace('.gz', '').replace('.fits', '.log'))
        else:
            logfile = outfiles[ii].replace('.gz', '').replace('.fits', '.log')
        assert(logfile != outfiles[ii])

        if args.makeqa and args.plan:
            log.info('Still need to make {} QA figure(s) across {} input file(s)'.format(
                np.sum(ntargets), len(groups)))
            return

        log.info('Rank {}, ntargets={}: {}'.format(rank, ntargets[ii], cmd))
        #log.info('  rank {}: {}'.format(rank, cmd))
        #log.info('LOGGING to {}'.format(logfile))
        sys.stdout.flush()

        if args.dry_run:
            continue

        try:
            t1 = time.time()
            if os.path.exists(logfile) and not args.overwrite:
                backup_logs(logfile)
            # memory leak?  Try making system call instead
            outdir = os.path.dirname(logfile)
            if not os.path.isdir(outdir):
                os.makedirs(outdir, exist_ok=True)
            if args.nolog:
                err = subprocess.call(cmd.split())
            else:
                with open(logfile, 'w') as mylog:
                    err = subprocess.call(cmd.split(), stdout=mylog, stderr=mylog)
            dt1 = time.time() - t1
            if err == 0:
                log.info('  rank {} done in {:.2f} sec'.format(rank, dt1))
                if not os.path.exists(outfiles[ii]):
                    log.warning('  rank {} missing {}'.format(rank, outfiles[ii]))
            else:
                log.warning('  rank {} broke after {:.1f} sec with error code {}'.format(rank, dt1, err))
        except Exception as err:
            log.warning('  rank {} raised an exception'.format(rank))
            import traceback
            traceback.print_exc()

    log.debug('  rank {} is done'.format(rank))
    sys.stdout.flush()

    if comm is not None:
        comm.barrier()

    if rank == 0 and not args.dry_run:
        for outfile in outfiles:
            if not os.path.exists(outfile):
                log.warning('Missing {}'.format(outfile))

        log.info('All done at {}'.format(time.asctime()))
        
def main():
    """Main wrapper on fastphot and fastspec.

    Currently only knows about SV1 observations.

    """
    import argparse    
    from fastspecfit.mpi import plan
    
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--coadd-type', type=str, default='healpix', choices=['healpix', 'cumulative', 'pernight', 'perexp'],
                        help='Specify which type of spectra/zbest files to process.')
    parser.add_argument('--specprod', type=str, default='fuji', #choices=['fuji', 'guadalupe', 'iron'],
                        help='Spectroscopic production to process.')
    
    parser.add_argument('--healpix', type=str, default=None, help='Comma-separated list of healpixels to process.')
    parser.add_argument('--survey', type=str, default='main,special,cmx,sv1,sv2,sv3', help='Survey to process.')
    parser.add_argument('--program', type=str, default='bright,dark,other,backup', help='Program to process.') # backup not supported
    parser.add_argument('--tile', default=None, type=str, nargs='*', help='Tile(s) to process.')
    parser.add_argument('--night', default=None, type=str, nargs='*', help='Night(s) to process (ignored if coadd-type is cumulative).')
    
    parser.add_argument('--mp', type=int, default=1, help='Number of multiprocessing processes per MPI rank or node.')
    parser.add_argument('-n', '--ntargets', type=int, help='Number of targets to process in each file.')
    parser.add_argument('--targetids', type=str, default=None, help='Comma-separated list of TARGETIDs to process.')
    
    parser.add_argument('--fastphot', action='store_true', help='Fit the broadband photometry.')

    parser.add_argument('--merge', action='store_true', help='Merge all individual catalogs (for a given survey and program) into one large file.')
    parser.add_argument('--mergeall', action='store_true', help='Merge all the individual merged catalogs into a single merged catalog.')
    parser.add_argument('--makeqa', action='store_true', help='Build QA in parallel.')
    parser.add_argument('--ntest', type=int, default=None, help='Select ntest healpixels as a test sample drawn randomly from the full specprod (only for coadd-type==healpix).')
    
    parser.add_argument('--ignore-quasarnet', default=False, action='store_true', help='Do not use QuasarNet to improve QSO redshifts.')
    
    parser.add_argument('--overwrite', action='store_true', help='Overwrite any existing output files.')
    parser.add_argument('--plan', action='store_true', help='Plan how many nodes to use and how to distribute the targets.')
    parser.add_argument('--nompi', action='store_true', help='Do not use MPI parallelism.')
    parser.add_argument('--nolog', action='store_true', help='Do not write to the log file.')
    parser.add_argument('--dry-run', action='store_true', help='Generate but do not run commands.')

    parser.add_argument('--outdir-html', default='/global/cfs/cdirs/desi/users/ioannis/fastspecfit',
                        type=str, help='Base output HTML directory.')
    parser.add_argument('--outdir-data', default='/global/cfs/cdirs/desi/spectro/fastspecfit',
                        type=str, help='Base output data directory.')
    
    specprod_dir = None

    args = parser.parse_args()

    if args.merge or args.mergeall or args.nompi:
        comm = None
    else:
        try:
            from mpi4py import MPI
            comm = MPI.COMM_WORLD
        except ImportError:
            comm = None

    if args.coadd_type == 'healpix':
        args.survey = args.survey.split(',')
        args.program = args.program.split(',')

        # For a test sample, use a range of tiles 
        if args.ntest:
            from astropy.table import Table
            rand = np.random.RandomState(seed=1)
            tilepix = Table.read('/global/cfs/cdirs/desi/spectro/redux/{}/healpix/tilepix.fits'.format(args.specprod))
            
            # trim to survey/program
            tilepix = tilepix[np.unique(np.hstack([np.where(tilepix['SURVEY'] == survey)[0] for survey in args.survey]))]
            if len(tilepix) == 0:
                log.warning('No matching surveys; nothing to do.')
                return            
            tilepix = tilepix[np.unique(np.hstack([np.where(tilepix['PROGRAM'] == program)[0] for program in args.program]))]
            if len(tilepix) == 0:
                log.warning('No matching programs; nothing to do.')
                return
            
            survprog = np.array([ss+pp for ss, pp in zip(tilepix['SURVEY'], tilepix['PROGRAM'])])
            I = rand.choice(len(tilepix), args.ntest, replace=False)
            args.healpix = ','.join(tilepix['HEALPIX'][I].astype(str))
            log.info('Selecting {} test healpixels: {}'.format(len(I), args.healpix))
            print(tilepix[I])

    if args.merge or args.mergeall:
        from fastspecfit.mpi import merge_fastspecfit
        merge_fastspecfit(specprod=args.specprod, specprod_dir=specprod_dir, coadd_type=args.coadd_type,
                          survey=args.survey, program=args.program, healpix=args.healpix,
                          tile=args.tile, night=args.night, outdir_data=args.outdir_data,
                          overwrite=args.overwrite, fastphot=args.fastphot, supermerge=args.mergeall,
                          mp=args.mp)
        return

    if args.plan and args.makeqa is False:
        if comm is None:
            rank = 0
        else:
            rank = comm.rank
        if rank == 0:
            plan(comm=comm, specprod=args.specprod, specprod_dir=specprod_dir,
                 coadd_type=args.coadd_type, survey=args.survey, program=args.program,
                 healpix=args.healpix, tile=args.tile, night=args.night,
                 makeqa=args.makeqa, mp=args.mp,
                 fastphot=args.fastphot, outdir_data=args.outdir_data,
                 outdir_html=args.outdir_html, overwrite=args.overwrite)
    else:
        run_fastspecfit(args, comm=comm, fastphot=args.fastphot, specprod_dir=specprod_dir,
                        makeqa=args.makeqa, outdir_data=args.outdir_data,
                        outdir_html=args.outdir_html)

if __name__ == '__main__':
    main()
