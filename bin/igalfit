#!/usr/bin/env python
"""Galaxy spectral synthesis fitting code.

ToDo:
* Generalize to work on coadded spectra.

"""
import os, pdb
import numpy as np 

def parse_args():
    """Parse input arguments.

    """
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--night', default='20200315', type=str, help='Night to process.')
    parser.add_argument('--tile', default='66003', type=str, help='Tile number to process.')
    parser.add_argument('--nproc', default=1, type=int, help='Number of cores.')
    parser.add_argument('--first', type=int, help='Index of first spectrum to process (0-indexed).')
    parser.add_argument('--last', type=int, help='Index of last spectrum to process (max of nobj-1).')
    parser.add_argument('--metallicity', default='Z0.0190', type=str, help='Stellar metallicity.')
    parser.add_argument('--verbose', action='store_true', help='Be verbose.')
    parser.add_argument('--overwrite', action='store_true', help='Overwrite any existing files.')

    args = parser.parse_args()
    return args

def main():

    from desigal.igalfit import get_data, _unpack_spectrum, ContinuumFit, EMLineFit, init_output
    args = parse_args()

    # Read the data.
    zbest, specobj = get_data(tile=args.tile, night=args.night, overwrite=args.overwrite)
    if args.first is None:
        args.first = 0
    if args.last is None:
        args.last = len(zbest) - 1
    fitindx = np.arange(args.last - args.first + 1) + args.first

    # Initialize the continuum- and emission-line fitting classes and the output
    # data table.
    CFit = ContinuumFit(nproc=args.nproc, verbose=args.verbose)
    EMFit = EMLineFit()

    out = init_output(args.tile, args.night, zbest, CFit)
    pdb.set_trace()

    for iobj in fitindx:
        # grab the spectrum
        galwave, galflux, galivar, galres, zredrock = _unpack_spectrum(specobj, zbest, iobj)

        # fit the continuum
        coeffs, continuum = CFit.fnnls_continuum(galwave, galflux, galivar, galres, zredrock)

        # fit the emission-line spectrum
        emfit, emlinemodel = EMFit.fit(galwave, galflux, galivar, galres, continuum,
                                       zredrock, verbose=args.verbose)
        print(emfit)

        # write out

        pngfile = 'emlinefit-{}-{}-{}.png'.format(args.tile, args.night, iobj)
        EMFit.emlineplot(galwave, galflux, galivar, continuum,
                         emlinemodel, zredrock, png=pngfile)

        pdb.set_trace()
    
if __name__ == '__main__':
    main()
