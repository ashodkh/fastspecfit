#!/usr/bin/env python
"""Galaxy spectral synthesis fitting code.

"""
import os, pdb
import numpy as np 

def parse_args():
    """Parse input arguments.

    """
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--night', default='20200315', type=str, help='Night to process.')
    parser.add_argument('--tile', default='66003', type=str, help='Tile number to process.')
    parser.add_argument('--nproc', default=1, type=int, help='Number of cores.')
    parser.add_argument('--metallicity', default='Z0.0190', type=str, help='Stellar metallicity.')
    parser.add_argument('--verbose', action='store_true', help='Be verbose.')

    args = parser.parse_args()
    return args

def main():

    from desigal.igalfit import get_data, ContinuumFit, EMLineModel, EMLineFit
    args = parse_args()

    # Read the data--
    zbest, specobj = get_data(tile=args.tile, night=args.night) 

    # Initialize the continuum- and emission-line fitting Classes.
    CFit = ContinuumFit(nproc=args.nproc, verbose=args.verbose)
    #EMFit = EMLineFit()

    for iobj in np.arange(3):
        # Select and repackage the spectrum we want to fit.
        npix, galwave, galflux, galivar, galres = [], [], [], [], []
        for camera in ('b', 'r', 'z'):
            npix.append(len(specobj.wave[camera]))
            galwave.append(specobj.wave[camera])
            galflux.append(specobj.flux[camera][iobj, :])
            galivar.append(specobj.ivar[camera][iobj, :])
            galres.append(Resolution(specobj.resolution_data[camera][iobj, :, :]))
            #galres.append(specobj.resolution_data[camera][iobj, :, :])
            
        zredrock = zbest['Z'][iobj]

        coeffs = CFit.fnnls_continuum(np.hstack(galflux), np.hstack(galivar),
                                      

        pdb.set_trace()
        
    # Read the SSPs
    #ssp = CKCz14(metallicity=args.metallicity)

    iobj = 3
    #FC.fit_continuum()
    FC.fnnls_continuum()

    print('Light-weighted age (Gyr):')
    ww = FC.fnnls_coeffs > 0
    weight = FC.fnnls_coeffs[ww]
    #print(weight, ssp.info['age'][ww].data / 1e9)
    print(np.sum(weight * ssp.info['age'][ww]) / np.sum(weight) / 1e9)

    # Fit the emission-line spectrum
    EM = EMLineModel(zline=FC.zredrock, linesigma=20.0, npixpercamera=FC.npix, emlineR=FC.galres)
    EMFit = EMLineFit()
    results = EMFit.fit(EM, FC)
    print(results)

    pngfile = 'emlinefit-{}-{}-{}.png'.format(args.tile, args.night, iobj)
    EMFit.emlineplot(FC, results['emlinemodel'], png=pngfile)
    
if __name__ == '__main__':
    main()
