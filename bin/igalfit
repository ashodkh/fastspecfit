#!/usr/bin/env python
"""Galaxy spectral synthesis fitting code.

ToDo:
* Generalize to work on coadded spectra.

"""
import os, pdb
import numpy as np 

def parse_args():
    """Parse input arguments.

    """
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('--night', default='20200315', type=str, help='Night to process.')
    parser.add_argument('--tile', default='66003', type=str, help='Tile number to process.')
    parser.add_argument('--nproc', default=1, type=int, help='Number of cores.')
    parser.add_argument('--first', type=int, help='Index of first spectrum to process (0-indexed).')
    parser.add_argument('--last', type=int, help='Index of last spectrum to process (max of nobj-1).')
    parser.add_argument('--metallicity', default='Z0.0190', type=str, help='Stellar metallicity.')
    parser.add_argument('--makeqa', action='store_true', help='Build QA output.')
    parser.add_argument('--verbose', action='store_true', help='Be verbose.')
    parser.add_argument('--overwrite', action='store_true', help='Overwrite any existing files.')

    args = parser.parse_args()
    return args

def main():

    from desigal.igalfit import get_data, _unpack_spectrum, ContinuumFit, EMLineFit, init_galfit
    args = parse_args()

    # Read the data.
    zbest, specobj = get_data(tile=args.tile, night=args.night)#, overwrite=args.overwrite)
    if args.first is None:
        args.first = 0
    if args.last is None:
        args.last = len(zbest) - 1
    fitindx = np.arange(args.last - args.first + 1) + args.first

    # Initialize the continuum- and emission-line fitting classes and the output
    # data table.
    CFit = ContinuumFit(nproc=args.nproc, verbose=args.verbose)
    EMFit = EMLineFit()

    desigal_dir = os.getenv('DESIGAL_DATA')
    galfitfile = os.path.join(desigal_dir, 'igalfit-{}-{}.fits'.format(args.tile, args.night))
    if not os.path.isfile(galfitfile) or args.overwrite:
        galfit = init_galfit(args.tile, args.night, zbest, CFit)

        for iobj in fitindx:
            # grab the spectrum
            galwave, galflux, galivar, galres, zredrock = _unpack_spectrum(specobj, zbest, iobj)

            # fit the stellar continuum
            contfit, continuum = CFit.fnnls_continuum(galwave, galflux, galivar, galres, zredrock)
            for col in ['coeff', 'chi2', 'dof', 'age', 'ebv', 'vdisp', 'z']:
                #if key == 'age':
                #    pdb.set_trace()
                galfit['CONTINUUM_{}'.format(col).upper()][iobj] = contfit[col]

            # fit the emission-line spectrum
            emfit, emlinemodel = EMFit.fit(galwave, galflux, galivar, galres, continuum,
                                           zredrock, verbose=args.verbose)
            for suffix in ['forbidden', 'balmer']:
                for col in ['linez', 'linesigma']:
                    galfit['{}_{}'.format(col, suffix).upper()][iobj] = emfit['{}_{}'.format(col, suffix)]
                    galfit['{}_{}_IVAR'.format(col, suffix).upper()][iobj] = emfit['{}_{}_ivar'.format(col, suffix)]

            print('Need fluxes!')
            for line in emfit['linenames']:
                uline = line.upper()
                galfit['{}_AMP'.format(uline)][iobj] = emfit['{}_amp'.format(line)]
                galfit['{}_AMP_IVAR'.format(uline)][iobj] = emfit['{}_amp_ivar'.format(line)]
                #galfit['{}_FLUX'.format(uline)][iobj] = emfit['{}_flux'.format(line)]
                #galfit['{}_FLUX_IVAR'.format(uline)][iobj] = emfit['{}_flux_ivar'.format(line)]
                
        # write out
        print('Writing {} spectra to {}'.format(len(galfit), galfitfile))
        galfit.write(galfitfile, overwrite=True)

    if args.makeqa:
        from astropy.table import Table
        galfit = Table.read(galfitfile)
        print('Read {} objects from {}'.format(len(galfit), galfitfile))

        qadir = os.path.join(desigal_dir, 'qa')
        if not os.path.isdir(qadir):
            os.makedirs(qadir)

        for iobj in fitindx:
            targetid = galfit['TARGETID'][iobj]
            galwave, galflux, galivar, galres, zredrock = _unpack_spectrum(specobj, zbest, iobj)

            continuum = CFit.fnnls_continuum_bestfit(galfit['CONTINUUM_COEFF'][iobj], galwave=galwave,
                                                     galres=galres, redshift=zredrock)
            emlinemodel = EMFit.emlinemodel_bestfit(galwave, galres, galfit[iobj])

            # emission-line fit
            pngfile = os.path.join(qadir, 'emlinefit-{}-{}-{}.png'.format(args.tile, args.night, targetid))
            objinfo = {
                'targetid': '{} {}'.format(zbest['TARGETID'][iobj], -999),
                'zredrock': '$z_{{\\rm redrock}}$={:.6f}'.format(galfit['Z'][iobj]),
                'linez': '$z_{{\\rm line}}$={:.6f}'.format(galfit['LINEZ_BALMER'][iobj]),
                'linesigma': '$\sigma_{{\\rm line}}$={:.1f} km/s'.format(galfit['LINESIGMA_BALMER'][iobj]),
                }
            EMFit.emlineplot(galwave, galflux, galivar, continuum,
                             emlinemodel, zredrock, objinfo, png=pngfile)

            # continuum fit
            pngfile = os.path.join(qadir, 'continuum-{}-{}-{}.png'.format(args.tile, args.night, targetid))
            objinfo = {
                'targetid': '{} {}'.format(zbest['TARGETID'][iobj], -999),
                #'targetid': 'TARGETID={} fiber={}'.format(zbest['TARGETID'][iobj], -999),
                'chi2': '$\\chi^{{2}}_{{\\nu}}$={:.3f}'.format(galfit['CONTINUUM_CHI2'][iobj]),
                'zredrock': '$z_{{\\rm redrock}}$={:.6f}'.format(galfit['Z'][iobj]),
                'zigalfit': '$z_{{\\rm igalfit}}$={:.6f}'.format(galfit['CONTINUUM_Z'][iobj]),
                'age': '<Age>={:.3f} Gyr'.format(galfit['CONTINUUM_AGE'][iobj]),
                'vdisp': '$\sigma$={:.1f} km/s'.format(galfit['CONTINUUM_VDISP'][iobj]),
                'ebv': 'E(B-V)={:.4f} km/s'.format(galfit['CONTINUUM_EBV'][iobj]),
                }
            CFit.fnnls_continuum_plot(galwave, galflux, galivar, continuum, objinfo, png=pngfile)

if __name__ == '__main__':
    main()
