#!/usr/bin/env python
"""Wrapper to build HTML output from previously generated QA files.

fastspecfit-html 

"""
import pdb # for debugging
import os, sys, time
import numpy as np

from desiutil.log import get_logger
log = get_logger()

cfsroot = '/global/cfs/cdirs/'
httpsroot = 'https://data.desi.lbl.gov/'

def parse(options=None):
    """Parse input arguments.

    """
    import sys, argparse

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--specprod', type=str, default='cascades', #choices=['cascades', 'blanc', 'daily'],
                        help='Spectroscopic production to process.')
    parser.add_argument('--coadd-type', type=str, default='deep',
                        choices=['deep', 'all', 'night', 'exposures'],
                        help='Specify which type of spectra/zbest files to process.')
    
    parser.add_argument('--tile', default=None, type=str, nargs='*', help='Tile(s) to process (ignored if coadd-type is exposures).')
    parser.add_argument('--night', default=None, type=str, nargs='*', help='Night(s) to process (ignored if coadd-type is exposures or deep-coadds).')
    
    parser.add_argument('--targetids', type=str, default=None, help='Comma-separated list of target IDs to process.')
    parser.add_argument('-n', '--ntargets', type=int, help='Number of targets to process in each file.')
    parser.add_argument('--firsttarget', type=int, default=0, help='Index of first object to to process in each file (0-indexed).')
    parser.add_argument('--mp', type=int, default=1, help='Number of multiprocessing processes per MPI rank or node.')

    parser.add_argument('--htmldir', type=str, help='Output directory for HTML files.')

    parser.add_argument('--outprefix', default=None, type=str, help='Optional prefix for output filename.')
    parser.add_argument('-o', '--outdir', default='.', type=str, help='Full path to desired output directory.')
    
    if options is None:
        args = parser.parse_args()
        log.info(' '.join(sys.argv))
    else:
        args = parser.parse_args(options)
        log.info('fastspecfit-html {}'.format(' '.join(options)))

    return args

def build_htmlhome(htmldir, targetids, specfiles, photfiles, htmlhome='index.html'):
    """Build the home (index.html) page.

    """
    htmlhomefile = os.path.join(htmldir, htmlhome)
    print('Building {}'.format(htmlhomefile))

    with open(htmlhomefile, 'w') as html:
        html.write('<html><body>\n')
        html.write('<style type="text/css">\n')
        html.write('table, td, th {padding: 5px; text-align: center; border: 1px solid black;}\n')
        html.write('p {display: inline-block;;}\n')
        html.write('</style>\n')

        html.write('<h1>fastsspecfit</h1>\n')

        html.write('<p style="width: 75%">\n')
        html.write("""Write me.</p>\n""")

        html.write('<br /><br />\n')
        html.write('<table>\n')
        html.write('<tr>\n')
        html.write('<th>TARGETID</th>\n')
        #html.write('<th>Index</th>\n')
        #html.write('<th></th>\n')
        html.write('</tr>\n')

        for targetid, specfile in zip(targetids, specfiles):
            htmlspecfile = specfile.replace('/global/cfs/cdirs', 'https://data.desi.lbl.gov')
            
            html.write('<tr>\n')
            #html.write('<td>{}</td>\n'.format(targetid))
            html.write('<td><a href="{}">{}</a></td>\n'.format(htmlspecfile, targetid))
            #html.write('<td><a href="{0}"><img src="{0}" height="256px"></a></td>\n'.format(htmlspecfile))
            #html.write('<td>{}</td>\n'.format(gal['INDEX']))
            html.write('</tr>\n')
        html.write('</table>\n')

        # close up shop
        html.write('<br /><br />\n')
        html.write('</html></body>\n')

    ## Build the individual pages (one per tile).
    #for raslice in sorted(set(alltiles)):
    #    inslice = np.where(raslice == alltiles)[0]
    #    galaxy, galaxydir, htmlgalaxydir = get_galaxy_galaxydir(sample[inslice], html=True)
    #
    #    slicefile = os.path.join(htmldir, 'RA{}.html'.format(raslice))
    #    print('Building {}'.format(slicefile))
    #
    #    with open(slicefile, 'w') as html:
    #        html.write('<html><body>\n')
    #        html.write('<style type="text/css">\n')
    #        html.write('table, td, th {padding: 5px; text-align: center; border: 1px solid black;}\n')
    #        html.write('p {width: "75%";}\n')
    #        html.write('</style>\n')
    #
    #        html.write('<h3>RA Slice {}</h3>\n'.format(raslice))
    #
    #        html.write('<table>\n')
    #        html.write('<tr>\n')
    #        #html.write('<th>Number</th>\n')
    #        html.write('<th> </th>\n')
    #        html.write('<th>Index</th>\n')
    #        html.write('<th>SGA ID</th>\n')
    #        html.write('<th>Galaxy</th>\n')
    #        html.write('<th>RA</th>\n')
    #        html.write('<th>Dec</th>\n')
    #        html.write('<th>Diameter (arcmin)</th>\n')
    #        html.write('<th>Viewer</th>\n')
    #
    #        html.write('</tr>\n')
    #        for gal, galaxy1, htmlgalaxydir1 in zip(sample[inslice], np.atleast_1d(galaxy), np.atleast_1d(htmlgalaxydir)):
    #
    #            htmlfile1 = os.path.join(htmlgalaxydir1.replace(htmldir, '')[1:], '{}.html'.format(galaxy1))
    #            pngfile1 = os.path.join(htmlgalaxydir1.replace(htmldir, '')[1:], '{}-largegalaxy-grz-montage.png'.format(galaxy1))
    #            thumbfile1 = os.path.join(htmlgalaxydir1.replace(htmldir, '')[1:], 'thumb2-{}-largegalaxy-grz-montage.png'.format(galaxy1))
    #
    #            ra1, dec1, diam1 = gal[racolumn], gal[deccolumn], gal[diamcolumn]
    #            viewer_link = legacyhalos.html.viewer_link(ra1, dec1, diam1*2*60/pixscale, sga=True)
    #
    #            html.write('<tr>\n')
    #            #html.write('<td>{:g}</td>\n'.format(count))
    #            #print(gal['INDEX'], gal['SGA_ID'], gal['GALAXY'])
    #            html.write('<td><a href="{0}"><img src="{1}" height="auto" width="100%"></a></td>\n'.format(pngfile1, thumbfile1))
    #            html.write('<td>{}</td>\n'.format(gal['INDEX']))
    #            html.write('<td>{}</td>\n'.format(gal['SGA_ID']))
    #            html.write('<td><a href="{}">{}</a></td>\n'.format(htmlfile1, galaxy1))
    #            html.write('<td>{:.7f}</td>\n'.format(ra1))
    #            html.write('<td>{:.7f}</td>\n'.format(dec1))
    #            html.write('<td>{:.4f}</td>\n'.format(diam1))
    #            #html.write('<td>{:.5f}</td>\n'.format(gal[zcolumn]))
    #            #html.write('<td>{:.4f}</td>\n'.format(gal['LAMBDA_CHISQ']))
    #            #html.write('<td>{:.3f}</td>\n'.format(gal['P_CEN'][0]))
    #            html.write('<td><a href="{}" target="_blank">Link</a></td>\n'.format(viewer_link))
    #            #html.write('<td><a href="{}" target="_blank">Link</a></td>\n'.format(_skyserver_link(gal)))
    #            html.write('</tr>\n')
    #        html.write('</table>\n')
    #        #count += 1
    #
    #        html.write('<br /><br />\n')
    #        html.write('</html></body>\n')

def _build_htmlpage_one(args):
    """Wrapper function for the multiprocessing."""
    return build_htmlpage_one(*args)

def build_htmlpage_one(ii, targetid, htmltargetid, specfile, nexttargetid, prevtargetid, nexthtmltargetid, prevhtmltargetid):
    """Build the web page for a single object.

    """
    import fitsio
    from glob import glob

    with open(htmltargetid, 'w') as html:
        html.write('<html><body>\n')
        html.write('<style type="text/css">\n')
        html.write('table, td, th {padding: 5px; text-align: center; border: 1px solid black}\n')
        html.write('</style>\n')

        #_html_group_properties(html, gal)

        html.write('<br /><br />\n')
        html.write('<a href="{}">Home</a>\n'.format(htmlhome))
        html.write('<br />\n')
        html.write('<a href="{}">Next ({})</a>\n'.format(nexthtmltargetid, nexttargetid))
        html.write('<br />\n')
        html.write('<a href="{}">Previous ({})</a>\n'.format(prevhtmltargetid, prevtargetid))
        html.write('<br />\n')

        html.write('<h1>{}</h1>'.format(targetid))
        html.write('<br /><br />\n')
        
        html.write('<table>\n')
        html.write('<tr>\n')
        #html.write('<td>{}</td>\n'.format(targetid))
        html.write('<td><a href="{}">{}</a></td>\n'.format(htmlspecfile, targetid))
        #html.write('<td><a href="{0}"><img src="{0}" height="256px"></a></td>\n'.format(htmlspecfile))
        #html.write('<td>{}</td>\n'.format(gal['INDEX']))
        html.write('</tr>\n')
        
        html.write('<br /><b><i>Last updated {}</b></i>\n'.format(js))
        html.write('<br />\n')
        html.write('</html></body>\n')

def main(args=None, comm=None, htmldir=None):
    """Make the HTML pages.

    """
    from glob import glob

    if isinstance(args, (list, tuple, type(None))):
        args = parse(args)

    if htmldir is None:
        htmldir = os.path.join(os.getenv('FASTSPECFIT_HTML'), args.specprod)

    tiledirs = glob(os.path.join(htmldir, 'tiles', '?????'))
    ntile = len(tiledirs)
    if ntile == 0:
        log.warning('No tiles found!')
        return
    
    log.info('Found {} tiles with coadd_type={}'.format(ntile, args.coadd_type))

    # Build HTML output for each tile serially.
    t0 = time.time()
    tiledicts = []
    for tiledir in tiledirs:
        tile = os.path.basename(tiledir)
        htmltiledir = os.path.join(htmldir, 'tiles', str(tile), args.coadd_type)
        
        specfiles = glob(os.path.join(htmltiledir, 'fastspec-?????-{}-*.png'.format(args.coadd_type)))
        photfiles = glob(os.path.join(htmltiledir, 'fastphot-?????-{}-*.png'.format(args.coadd_type)))
        nspec = len(specfiles)
        nphot = len(photfiles)

        targetids = []
        if nspec > 0:
            targetids.append(np.array([os.path.basename(specfile).replace('.png', '')[-17:] for specfile in specfiles]))
        if nphot > 0:
            targetids.append(np.array([os.path.basename(photfile).replace('.png', '')[-17:] for photfile in photfiles]))
        targetids = np.unique(targetids)
        targetids = np.sort(targetids)

        pdb.set_trace()
        

        # need to store the coadd_type
        tiledict = {str(tile): {}}

        log.info('Found {} fastspec files and {} fastphot files for tile {}.'.format(len(fastspecfiles), len(fastphotfiles), tile))

        tiledicts.append(tiledict)

    targetids = np.array([os.path.basename(fastspecfile).replace('.png', '')[-17:] for fastspecfile in fastspecfiles])

    # Build the home (index.html) page (always, irrespective of clobber)--
    build_htmlhome(htmldir, targetids, fastspecfiles, fastphotfiles, htmlhome='index.html')

    # Now the individual pages.
    htmltargetids = [specfile.replace(cfsroot, httpsroot).replace('.png', '.html') for specfile in fastspecfiles]

    nexttargetids = np.roll(np.atleast_1d(targetids), -1)
    prevtargetids = np.roll(np.atleast_1d(targetids), 1)
    nexthtmltargetids = np.roll(np.atleast_1d(htmltargetids), -1)
    prevhtmltargetids = np.roll(np.atleast_1d(htmltargetids), 1)

    htmlargs = []
    for ii, (targetid, htmltargetid, specfile, nexttargetid, prevtargetid, nexthtmltargetid, prevhtmltargetid) in enumerate(
            zip(targetids, htmltargetids, fastspecfiles, nexttargetids, prevtargetids, nexthtmltargetids, prevhtmltargetids)):
        htmlargs.append([ii, targetid, htmltargetid, specfile, nexttargetid, prevtargetid, nexthtmltargetid, prevhtmltargetid])

    if args.mp > 1:
        import multiprocessing
        with multiprocessing.Pool(args.mp) as P:
            P.map(_build_htmlpage_one, htmlargs)
    else:
        [build_htmlpage_one(*_htmlargs) for _htmlargs in htmlargs]

    log.info('QA for everything took: {:.2f} sec'.format(time.time()-t0))

if __name__ == '__main__':
    main()
    
