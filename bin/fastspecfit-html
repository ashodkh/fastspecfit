#!/usr/bin/env python
"""Wrapper to build HTML output from previously generated QA files.

fastspecfit-html --fastspecfile ./fastspect.fits

fastspecfit-html --fastphotfile /global/cfs/cdirs/desi/spectro/fastspecfit/denali/tiles/merged/fastphot-denali-cumulative.fits \
  --fastspecfile /global/cfs/cdirs/desi/spectro/fastspecfit/denali/tiles/merged/fastspec-denali-cumulative.fits

"""
import pdb # for debugging
import os, sys, time
import numpy as np

from desiutil.log import get_logger
log = get_logger()

cfsroot = '/global/cfs/cdirs/'
httpsroot = 'https://data.desi.lbl.gov/'

def parse(options=None):
    """Parse input arguments.

    """
    import sys, argparse

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--specprod', type=str, default='denali', choices=['denali', 'cascades', 'daily'],
                        help='Spectroscopic production to process.')
    parser.add_argument('--coadd-type', type=str, default='cumulative', choices=['cumulative', 'pernight', 'perexp'],
                        help='Type of spectral coadds corresponding to the input zbestfiles.')
    parser.add_argument('--tile', default=None, type=str, nargs='*', help='Tile(s) to process.')
    parser.add_argument('--night', default=None, type=str, nargs='*', help='Night(s) to process (ignored if coadd-type is cumulative).')
    
    parser.add_argument('--targetids', type=str, default=None, help='Comma-separated list of target IDs to process.')
    parser.add_argument('-n', '--ntargets', type=int, help='Number of targets to process in each file.')
    parser.add_argument('--firsttarget', type=int, default=0, help='Index of first object to to process in each file (0-indexed).')
    parser.add_argument('--mp', type=int, default=1, help='Number of multiprocessing processes per MPI rank or node.')

    parser.add_argument('--htmlhome', type=str, default='index.html', help='Main HTML page name.')
    parser.add_argument('--htmldir', type=str, help='Output directory for HTML files.')

    parser.add_argument('--outprefix', default=None, type=str, help='Optional prefix for output filename.')
    parser.add_argument('-o', '--outdir', default='.', type=str, help='Full path to desired output directory.')

    parser.add_argument('--fastphotfile', default=None, type=str, help='Full path to fastphot fitting results.')
    parser.add_argument('--fastspecfile', default=None, type=str, help='Full path to fastphot fitting results.')
    
    if options is None:
        args = parser.parse_args()
        log.info(' '.join(sys.argv))
    else:
        args = parser.parse_args(options)
        log.info('fastspecfit-html {}'.format(' '.join(options)))

    return args

def build_htmlhome(htmldir, fastfit, metadata, tileinfo, coadd_type='cumulative',
                   specprod='denali', htmlhome='index.html'):
    """Build the home (index.html) page.

    """
    htmldir_https = htmldir.replace(cfsroot, httpsroot)

    htmlhomefile = os.path.join(htmldir, htmlhome)
    htmlhomefile_https = os.path.join(htmldir_https, htmlhome)
    print('Building {}'.format(htmlhomefile))

    targetclasses = ('ELG', 'LRG', 'QSO', 'BGS_ANY', 'MWS_ANY')

    with open(htmlhomefile, 'w') as html:
        html.write('<html><body>\n')
        html.write('<style type="text/css">\n')
        html.write('table, td, th {padding: 5px; text-align: center; border: 1px solid black;}\n')
        html.write('p {display: inline-block;;}\n')
        html.write('</style>\n')

        html.write('<br />\n')
        html.write('<h1><a href="https://fastspecfit.readthedocs.io/en/latest/index.html">FastSpecFit</a> Visualizations</h1>\n')
        html.write('<h3><a href="https://data.desi.lbl.gov/desi/spectro/redux/denali">{} Data Release</a></h3>\n'.format(specprod))

        #html.write('<p style="width: 75%">\n')
        #html.write("""Write me.</p>\n""")

        html.write('<br />\n')
        html.write('<table>\n')
        html.write('<tr>\n')
        html.write('<th></th>\n')
        html.write('<th></th>\n')
        html.write('<th></th>\n')
        html.write('<th></th>\n')
        html.write('<th colspan="2">Effective Time (minutes)</th>\n')
        html.write('</tr>\n')
        
        html.write('<tr>\n')
        html.write('<th>Tile</th>\n')
        html.write('<th>Survey</th>\n')
        html.write('<th>Program</th>\n')
        html.write('<th>Nexp</th>\n')
        html.write('<th>ELG, dark</th>\n')
        html.write('<th>BGS, bright</th>\n')
        html.write('</tr>\n')

        for tinfo in tileinfo:
            tile = tinfo['TILEID']
            tiledatafile = os.path.join(htmldir, 'tiles', coadd_type, str(tile), '{}-{}.html'.format(tile, coadd_type))
            tilehtmlfile = os.path.join(htmldir_https, 'tiles', coadd_type, str(tile), '{}-{}.html'.format(tile, coadd_type))
            
            html.write('<tr>\n')
            html.write('<td><a href="{}">{}</a></td>\n'.format(tilehtmlfile, tile))
            html.write('<td>{}</td>\n'.format(tinfo['SURVEY'].upper()))
            html.write('<td>{}</td>\n'.format(tinfo['FAPRGRM'].upper()))
            html.write('<td>{}</td>\n'.format(tinfo['NEXP']))
            html.write('<td>{:.0f}</td>\n'.format(tinfo['ELG_EFFTIME_DARK']/60))
            html.write('<td>{:.0f}</td>\n'.format(tinfo['BGS_EFFTIME_BRIGHT']/60))
            html.write('</tr>\n')
        html.write('</table>\n')

        # close up shop
        html.write('<br /><br />\n')
        html.write('</html></body>\n')

    # Now the individual tile pages are more finely subdivided by target classes.
    for tinfo in tileinfo:
        tile = tinfo['TILEID']
        tiledatafile = os.path.join(htmldir, 'tiles', coadd_type, str(tile), '{}-{}.html'.format(tile, coadd_type))
        log.info('Building {}'.format(tiledatafile))

        if tinfo['SURVEY'].upper() == 'SV1':
            from desitarget.sv1.sv1_targetmask import desi_mask#, bgs_mask, mws_mask
            desibit = 'SV1_DESI_TARGET'
            bgsbit = 'SV1_BGS_TARGET'
            mwsbit = 'SV1_MWS_TARGET'
        elif tinfo['SURVEY'].upper() == 'SV2':
            from desitarget.sv2.sv2_targetmask import desi_mask#, bgs_mask, mws_mask
            desibit = 'SV2_DESI_TARGET'
            bgsbit = 'SV2_BGS_TARGET'
            mwsbit = 'SV2_MWS_TARGET'
        else:
            NotImplementedError

        # need to account for the join suffix when we have both fastspec and
        # fastphot output
        if 'DESI_TARGET_SPEC' in metadata.colnames:
            desibit = desibit+'_SPEC'
            bgsbit = bgsbit+'_SPEC'
            mwsbit = mwsbit+'_SPEC'

        with open(tiledatafile, 'w') as html:
            html.write('<html><body>\n')
            html.write('<style type="text/css">\n')
            html.write('table, td, th {padding: 5px; text-align: center; border: 1px solid black;}\n')
            html.write('p {width: "75%";}\n')
            html.write('</style>\n')

            html.write('<h3><a href="{}">Home</a></h3>\n'.format(htmlhomefile_https))

            html.write('<h2>Tile {}</h2>\n'.format(tile))
            html.write('<br />\n')
            html.write('<table>\n')
            html.write('<tr>\n')
            html.write('<th></th>\n')
            html.write('<th></th>\n')
            html.write('<th></th>\n')
            html.write('<th colspan="2">Effective Time (minutes)</th>\n')
            html.write('</tr>\n')

            html.write('<tr>\n')
            html.write('<th>Survey</th>\n')
            html.write('<th>Program</th>\n')
            html.write('<th>Nexp</th>\n')
            html.write('<th>ELG, dark</th>\n')
            html.write('<th>BGS, bright</th>\n')
            html.write('</tr>\n')
            html.write('<tr>\n')
            html.write('<td>{}</td>\n'.format(tinfo['SURVEY'].upper()))
            html.write('<td>{}</td>\n'.format(tinfo['FAPRGRM'].upper()))
            html.write('<td>{}</td>\n'.format(tinfo['NEXP']))
            html.write('<td>{:.0f}</td>\n'.format(tinfo['ELG_EFFTIME_DARK']/60))
            html.write('<td>{:.0f}</td>\n'.format(tinfo['BGS_EFFTIME_BRIGHT']/60))
            html.write('</tr>\n')
            html.write('</table>\n')
            
            html.write('<br /><br />\n')
            html.write('<table>\n')
            html.write('<tr>\n')
            html.write('<th>Target Class</th>\n')
            html.write('<th>N</th>\n')
            html.write('</tr>\n')
                
            for targetclass in targetclasses:
                targhtmlfile = os.path.join(htmldir_https, 'tiles', coadd_type, str(tile), '{}-{}-{}.html'.format(tile, targetclass, coadd_type))
                targdatafile = os.path.join(htmldir, 'tiles', coadd_type, str(tile), '{}-{}-{}.html'.format(tile, targetclass, coadd_type))
                log.info('  Building {}'.format(targdatafile))

                targintile = np.where((tile == metadata['TILEID']) *
                                      metadata[desibit] & desi_mask.mask(targetclass) != 0)[0]
                nobj = len(targintile)

                html.write('<tr>\n')
                html.write('<td><a href="{}">{}</a></td>\n'.format(targhtmlfile, targetclass))
                html.write('<td>{}</td>\n'.format(nobj))
                html.write('</tr>\n')

                with open(targdatafile, 'w') as targhtml:
                    targhtml.write('<html><body>\n')
                    targhtml.write('<style type="text/css">\n')
                    targhtml.write('table, td, th {padding: 5px; text-align: center; border: 1px solid black;}\n')
                    targhtml.write('p {width: "75%";}\n')
                    targhtml.write('</style>\n')
                    targhtml.write('<h3><a href="{}">Home</a></h3>\n'.format(htmlhomefile_https))
                    targhtml.write('<h3>Tile {} - {} (N={})</h3>\n'.format(tile, targetclass, nobj))
                    targhtml.write('<table>\n')
                    targhtml.write('<tr>\n')
                    targhtml.write('<th>TargetID</th>\n')
                    targhtml.write('<th>fastspec</th>\n')
                    targhtml.write('<th>fastphot</th>\n')
                    targhtml.write('</tr>\n')
                
                    for targetid in metadata['TARGETID'][targintile]:
                        targhtml.write('<tr>\n')
                        targhtml.write('<td>{}</td>\n'.format(targetid))

                        for prefix in ('fastspec', 'fastphot'):
                            httpfile = os.path.join(htmldir_https, 'tiles', coadd_type, str(tile), '{}-{}-{}-{}.png'.format(
                                prefix, tile, coadd_type, targetid))
                            pngfile = os.path.join(htmldir, 'tiles', coadd_type, str(tile), '{}-{}-{}-{}.png'.format(
                                prefix, tile, coadd_type, targetid))
                            if os.path.isfile(pngfile):
                                targhtml.write('<td><a href="{0}"><img src="{0}" height="auto" width="512px"></a></td>\n'.format(httpfile))
                            else:
                                targhtml.write('<td>Not Available</td>\n')
                    targhtml.write('</table>\n')
                    targhtml.write('<br /><br />\n')
                    targhtml.write('</html></body>\n')

            html.write('</table>\n')
            html.write('<br /><br />\n')
            html.write('</html></body>\n')

def _build_htmlpage_one(args):
    """Wrapper function for the multiprocessing."""
    return build_htmlpage_one(*args)

def build_htmlpage_one(ii, targetid, htmltargetid, specfile, nexttargetid, prevtargetid, nexthtmltargetid, prevhtmltargetid):
    """Build the web page for a single object.

    """
    import fitsio
    from glob import glob

    with open(htmltargetid, 'w') as html:
        html.write('<html><body>\n')
        html.write('<style type="text/css">\n')
        html.write('table, td, th {padding: 5px; text-align: center; border: 1px solid black}\n')
        html.write('</style>\n')

        #_html_group_properties(html, gal)

        html.write('<br /><br />\n')
        html.write('<a href="{}">Home</a>\n'.format(htmlhome))
        html.write('<br />\n')
        html.write('<a href="{}">Next ({})</a>\n'.format(nexthtmltargetid, nexttargetid))
        html.write('<br />\n')
        html.write('<a href="{}">Previous ({})</a>\n'.format(prevhtmltargetid, prevtargetid))
        html.write('<br />\n')

        html.write('<h1>{}</h1>'.format(targetid))
        html.write('<br /><br />\n')
        
        html.write('<table>\n')
        html.write('<tr>\n')
        #html.write('<td>{}</td>\n'.format(targetid))
        html.write('<td><a href="{}">{}</a></td>\n'.format(htmlspecfile, targetid))
        #html.write('<td><a href="{0}"><img src="{0}" height="256px"></a></td>\n'.format(htmlspecfile))
        #html.write('<td>{}</td>\n'.format(gal['INDEX']))
        html.write('</tr>\n')
        
        html.write('<br /><b><i>Last updated {}</b></i>\n'.format(js))
        html.write('<br />\n')
        html.write('</html></body>\n')

def main(args=None, comm=None, htmldir=None):
    """Make the HTML pages.

    """
    from astropy.table import Table
    from fastspecfit.io import read_fastspecfit
    
    if isinstance(args, (list, tuple, type(None))):
        args = parse(args)

    if htmldir is None:
        htmldir = os.path.join(os.getenv('FASTSPECFIT_HTML'), args.specprod)

    # Read the fitting results and get all the unique targetids.
    if (args.fastphotfile is None and args.fastspecfile is None):
        log.warning('Must provide one of --fastphotfile or --fastspecfile.')
        return
    
    elif (args.fastphotfile is not None and args.fastspecfile is not None):
        fastspec, metaspec, specprod, coadd_type = read_fastspecfit(args.fastspecfile)
        fastphot, metaphot, _specprod, _coadd_type = read_fastspecfit(args.fastphotfile, fastphot=True)
        if (specprod != _specprod) or (coadd_type != _coadd_type):
            log.warning('Mis-matching specprod or coadd_type in fastspec vs fastphot fitting results!')
            return

        from astropy.table import join
        fastspec['TILEID'] = metaspec['TILEID']
        fastphot['TILEID'] = metaphot['TILEID']

        joinkeys = ['TARGETID', 'TILEID']
        if 'NIGHT' in fastspec.colnames:
            joinkeys += 'NIGHT'
            fastspec['NIGHT'] = metaspec['NIGHT']
            fastphot['NIGHT'] = metaphot['NIGHT']
            
        fastfit = join(fastspec, fastphot, keys=joinkeys, join_type='outer',
                       table_names=['SPEC', 'PHOT'])
        metadata = join(metaspec, metaphot, keys=joinkeys, join_type='outer',
                       table_names=['SPEC', 'PHOT'])
        assert(np.all(fastfit['TARGETID'] == metadata['TARGETID']))
        assert(np.all(fastfit['TILEID'] == metadata['TILEID']))

    elif args.fastphotfile is None and args.fastspecfile is not None:
        fastfit, metadata, specprod, coadd_type = read_fastspecfit(args.fastspecfile)
        
    elif args.fastphotfile is not None and args.fastspecfile is None:
        fastfit, metadata, specprod, coadd_type = read_fastspecfit(args.fastphotfile, fastphot=True)

    else:
        pass # should never get here

    # optionally trim to a particular tile and/or night
    def _select_tiles_nights_targets(fastfit, metadata, tiles=None, nights=None):
        if fastfit is None or metadata is None:
            return fastfit, metadata
        keep = np.ones(len(fastfit), bool)
        if tiles:
            tilekeep = np.zeros(len(fastfit), bool)
            for tile in tiles:
                tilekeep = np.logical_or(tilekeep, metadata['TILEID'].astype(str) == tile)
            keep = np.logical_and(keep, tilekeep)
            log.info('Keeping {} objects from tile(s) {}'.format(len(fastfit), ','.join(tiles)))
        if nights and 'NIGHT' in metadata:
            nightkeep = np.zeros(len(fastfit), bool)
            for night in nights:
                nightkeep = np.logical_or(nightkeep, metadata['NIGHT'].astype(str) == night)
            keep = np.logical_and(keep, nightkeep)
            log.info('Keeping {} objects from night(s) {}'.format(len(fastfit), ','.join(nights)))
        return fastfit[keep], metadata[keep]
    
    fastfit, metadata = _select_tiles_nights_targets(
        fastfit, metadata, tiles=args.tile, nights=args.night)

    # parse the targetids optional input
    if args.targetids:
        targetids = [int(x) for x in args.targetids.split(',')]

        keep = np.where(np.isin(fastfit['TARGETID'], targetids))[0]
        if len(keep) == 0:
            log.warning('No matching targetids found!')
            return
        fastfit = fastfit[keep]
        metadata = metadata[keep]

    if args.ntargets is not None:
        keep = np.arange(args.ntargets) + args.firsttarget
        log.info('Keeping {} targets.'.format(args.ntargets))
        fastfit = fastfit[keep]
        metadata = metadata[keep]

    # read the tile info file for this production
    tilefile = os.path.join(os.getenv('DESI_SPECTRO_REDUX'), specprod, 'tiles-{}.csv'.format(specprod))
    tileinfo = Table.read(tilefile)
    tileinfo = tileinfo[np.isin(tileinfo['TILEID'], np.unique(metadata['TILEID']))]

    log.info('Fix SURVEY for tiles 80605-80610, which are incorrectly identified as cmx tiles.')    
    surveyfix = np.where((tileinfo['TILEID'] >= 80605) * (tileinfo['TILEID'] <= 80610))[0]
    if len(surveyfix) > 0:
        tileinfo['SURVEY'][surveyfix] = 'sv1'
    log.info('Read survey info for {} tiles'.format(len(tileinfo)))

    t0 = time.time()

    # Build the home (index.html) page (always, irrespective of clobber)--
    build_htmlhome(htmldir, fastfit, metadata, tileinfo, htmlhome=args.htmlhome,
                   specprod=specprod)

    ## Now the individual pages.
    #htmltargetids = [specfile.replace(cfsroot, httpsroot).replace('.png', '.html') for specfile in fastspecfiles]
    #
    #nexttargetids = np.roll(np.atleast_1d(targetids), -1)
    #prevtargetids = np.roll(np.atleast_1d(targetids), 1)
    #nexthtmltargetids = np.roll(np.atleast_1d(htmltargetids), -1)
    #prevhtmltargetids = np.roll(np.atleast_1d(htmltargetids), 1)
    #
    #htmlargs = []
    #for ii, (targetid, htmltargetid, specfile, nexttargetid, prevtargetid, nexthtmltargetid, prevhtmltargetid) in enumerate(
    #        zip(targetids, htmltargetids, fastspecfiles, nexttargetids, prevtargetids, nexthtmltargetids, prevhtmltargetids)):
    #    htmlargs.append([ii, targetid, htmltargetid, specfile, nexttargetid, prevtargetid, nexthtmltargetid, prevhtmltargetid])
    #
    #if args.mp > 1:
    #    import multiprocessing
    #    with multiprocessing.Pool(args.mp) as P:
    #        P.map(_build_htmlpage_one, htmlargs)
    #else:
    #    [build_htmlpage_one(*_htmlargs) for _htmlargs in htmlargs]

    log.info('QA for everything took: {:.2f} sec'.format(time.time()-t0))

if __name__ == '__main__':
    main()
    
