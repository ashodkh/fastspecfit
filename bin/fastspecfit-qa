#!/usr/bin/env python
"""fastspecfit QA

fastspecfit-qa --fastphotfile /global/cfs/cdirs/desi/spectro/fastspecfit/blanc/tiles/80606/deep/fastphot-0-80606-deep.fits --outdir . --ntargets 20 --firsttarget 50

"""
import pdb # for debugging
import os, sys, time
import numpy as np

from desiutil.log import get_logger
log = get_logger()

## ridiculousness!
#import tempfile
#os.environ['MPLCONFIGDIR'] = tempfile.mkdtemp()

def _desiqa_one(args):
    """Multiprocessing wrapper."""
    return desiqa_one(*args)

def desiqa_one(CFit, EMFit, data, fastfit, metadata, coadd_type,
               fastphot=False, outdir=None, outprefix=None):
    """QA on one spectrum."""
    #t0 = time.time()
    if fastphot:
        CFit.qa_fastphot(data, fastfit, metadata, coadd_type=coadd_type,
                         outprefix=outprefix, outdir=outdir)
    else:
        EMFit.qa_fastspec(data, fastfit, metadata, coadd_type=coadd_type,
                          outprefix=outprefix, outdir=outdir)
    #log.info('Building took {:.2f} sec'.format(time.time()-t0))

def parse(options=None):
    """Parse input arguments.

    """
    import sys, argparse

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('--tile', default=None, type=str, nargs='*', help='Generate QA for all objects on this tile.')
    parser.add_argument('--night', default=None, type=str, nargs='*', help="""Generate QA for all objects observed on this
        night (only defined for coadd-type 'night' and 'exposures').""")
    parser.add_argument('--targetids', type=str, default=None, help='Comma-separated list of target IDs to process.')
    parser.add_argument('-n', '--ntargets', type=int, help='Number of targets to process in each file.')
    parser.add_argument('--firsttarget', type=int, default=0, help='Index of first object to to process in each file (0-indexed).')
    parser.add_argument('--mp', type=int, default=1, help='Number of multiprocessing processes per MPI rank or node.')

    parser.add_argument('--outprefix', default=None, type=str, help='Optional prefix for output filename.')
    parser.add_argument('-o', '--outdir', default='.', type=str, help='Full path to desired output directory.')
    
    parser.add_argument('--fastphotfile', default=None, type=str, help='Full path to fastphot fitting results.')
    parser.add_argument('--fastspecfile', default=None, type=str, help='Full path to fastphot fitting results.')
    #parser.add_argument('zbestdata', nargs='*', help='Full path to zbest file(s) or a directory containing zbest file(s).')
    
    if options is None:
        args = parser.parse_args()
        log.info(' '.join(sys.argv))
    else:
        args = parser.parse_args(options)
        log.info('fastspecfit-qa {}'.format(' '.join(options)))

    return args

def main(args=None, comm=None):
    """Main module.

    """
    import fitsio
    from astropy.table import Table
    from fastspecfit.continuum import ContinuumFit
    from fastspecfit.emlines import EMLineFit
    from fastspecfit.io import DESISpectra, read_fastspecfit

    if isinstance(args, (list, tuple, type(None))):
        args = parse(args)

    # Read the fitting results.
    if ((args.fastphotfile is None and args.fastspecfile is None) or
        (args.fastphotfile is not None and args.fastspecfile is not None)):
        log.warning('Must provide one (but not both) of --fastphotfile or --fastspecfile.')
        return
    elif args.fastphotfile is None and args.fastspecfile is not None:
        fastphot = False
        fastfitfile = args.fastspecfile
    elif args.fastphotfile is not None and args.fastspecfile is None:
        fastphot = True
        fastfitfile = args.fastphotfile
    else:
        pass # should never get here
    
    fastfit, metadata, specprod, coadd_type = read_fastspecfit(fastfitfile, fastphot=fastphot)
    
    # parse the targetids optional input
    if args.targetids:
        targetids = [int(x) for x in args.targetids.split(',')]

        keep = np.where(np.isin(fastfit['TARGETID'], targetids))[0]
        if len(keep) == 0:
            log.warning('No matching targetids found!')
            return
        fastfit = fastfit[keep]
        metadata = metadata[keep]

    if args.ntargets is not None:
        keep = np.arange(args.ntargets) + args.firsttarget
        log.info('Keeping {} targets.'.format(args.ntargets))
        fastfit = fastfit[keep]
        metadata = metadata[keep]

    # optionally trim to a particular tile and/or night
    def _select_tiles_nights_targets(fastfit, metadata, tiles=None, nights=None):
        keep = np.ones(len(fastfit), bool)
        if tiles:
            tilekeep = np.zeros(len(fastfit), bool)
            for tile in tiles:
                tilekeep = np.logical_or(tilekeep, metadata['TILEID'].astype(str) == tile)
            keep = np.logical_and(keep, tilekeep)
            log.info('Keeping {} objects from tile(s) {}'.format(len(fastfit), ','.join(tiles)))
        if nights and 'NIGHT' in metadata:
            nightkeep = np.zeros(len(fastfit), bool)
            for night in nights:
                nightkeep = np.logical_or(nightkeep, metadata['NIGHT'].astype(str) == night)
            keep = np.logical_and(keep, nightkeep)
            log.info('Keeping {} objects from night(s) {}'.format(len(fastfit), ','.join(nights)))
        return fastfit[keep], metadata[keep]
    
    fastfit, metadata = _select_tiles_nights_targets(
        fastfit, metadata, tiles=args.tile, nights=args.night)

    # Initialize the continuum- and emission-line fitting classes.
    t0 = time.time()
    CFit = ContinuumFit()
    EMFit = EMLineFit()
    Spec = DESISpectra()
    log.info('Initializing the classes took: {:.2f} sec'.format(time.time()-t0))

    if args.outdir:
        if not os.path.isdir(args.outdir):
            os.makedirs(args.outdir)
        
    # Construct the zbestfiles filenames based on the input.
    zbestdir = os.path.join(os.getenv('DESI_SPECTRO_REDUX'), specprod, 'tiles')
    alltiles = metadata['TILEID'].astype(str).data
    allpetals = metadata['FIBER'].data // 500

    #if fastphot:
    #    synthphot = False
    #else:
    #    synthphot = True

    def _wrap_qa(zbestfile, indx):
        targetids = fastfit['TARGETID'][indx]
        Spec.find_specfiles(zbestfiles=zbestfile, specprod=specprod,
                            coadd_type=coadd_type, targetids=targetids)
        data = Spec.read_and_unpack(CFit, fastphot=fastphot, synthphot=True, remember_coadd=True)
        qaargs = [(CFit, EMFit, data[igal], fastfit[indx[igal]], metadata[indx[igal]],
                   coadd_type, fastphot, args.outdir, args.outprefix) for igal in np.arange(len(indx))]                

        if args.mp > 1:
            import multiprocessing
            with multiprocessing.Pool(args.mp) as P:
                P.map(_desiqa_one, qaargs)
        else:
            [desiqa_one(*_qaargs) for _qaargs in qaargs]

    t0 = time.time()
    if coadd_type == 'cumulative':
        for tile in set(alltiles):
            for petal in set(allpetals):
                indx = np.where((tile == alltiles) * (petal == allpetals))[0]
                zbestfile = os.path.join(zbestdir, str(tile), coadd_type, 'zbest-{}-{}-{}.fits'.format(petal, tile, coadd_type))
                pdb.set_trace()
                _wrap_qa(zbestfile, indx)
    elif coadd_type == 'pernight':
        allnights = metadata['NIGHT'].astype(str).data
        for night in set(allnights):
            for tile in set(alltiles):
                for petal in set(allpetals):
                    indx = np.where((night == allnights) * (tile == alltiles) * (petal == allpetals))[0]
                    zbestfile = os.path.join(zbestdir, str(tile), str(night), 'zbest-{}-{}-{}.fits'.format(petal, tile, night))
                    _wrap_qa(zbestfile, indx)
                    
    elif coadd_type == 'exposures':
        raise NotImplemented
        # we probably want to *require* tile or night in this case...
    else:
        pass
    log.info('QA for everything took: {:.2f} sec'.format(time.time()-t0))

if __name__ == '__main__':
    main()
    
