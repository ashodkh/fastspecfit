#!/usr/bin/env python
"""fastspecfit QA

fastspecfit-qa --fastphotfile /global/cfs/cdirs/desi/spectro/fastspecfit/blanc/tiles/80606/deep/fastphot-0-80606-deep.fits --outdir . --ntargets 20 --firsttarget 50

"""
import pdb # for debugging
import os, sys, time
import numpy as np

from desiutil.log import get_logger
log = get_logger()

## ridiculousness!
#import tempfile
#os.environ['MPLCONFIGDIR'] = tempfile.mkdtemp()

def parse(options=None):
    """Parse input arguments.

    """
    import sys, argparse

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('--healpix', default=None, type=str, nargs='*', help="""Generate QA for all objects
        with this healpixels (only defined for coadd-type 'healpix').""")
    parser.add_argument('--tile', default=None, type=str, nargs='*', help='Generate QA for all objects on this tile.')
    parser.add_argument('--night', default=None, type=str, nargs='*', help="""Generate QA for all objects observed on this
        night (only defined for coadd-type 'pernight' and 'perexp').""")
    parser.add_argument('--redux_dir', default=None, type=str, help='Top-level path to the reduced spectra.')
    parser.add_argument('--redrockfiles', nargs='*', help='Optional full path to redrock file(s).')    
    parser.add_argument('--redrockfile-prefix', type=str, default='redrock-', help='Prefix of the input Redrock file name(s).')
    parser.add_argument('--specfile-prefix', type=str, default='coadd-', help='Prefix of the spectral file(s).')
    parser.add_argument('--qnfile-prefix', type=str, default='qso_qn-', help='Prefix of the QuasarNet afterburner file(s).')
    parser.add_argument('--mapdir', type=str, default=None, help='Optional directory name for the dust maps.')
    parser.add_argument('--dr9dir', type=str, default=None, help='Optional directory name for the DR9 photometry.')

    parser.add_argument('--targetids', type=str, default=None, help='Comma-separated list of target IDs to process.')
    parser.add_argument('-n', '--ntargets', type=int, help='Number of targets to process in each file.')
    parser.add_argument('--firsttarget', type=int, default=0, help='Index of first object to to process in each file (0-indexed).')
    parser.add_argument('--mp', type=int, default=1, help='Number of multiprocessing processes per MPI rank or node.')
    parser.add_argument('--nolegend', action='store_true', help='Exclude legends from QA.')
    parser.add_argument('--webqa', action='store_true', help='Build QA for the web-app.')
    parser.add_argument('--outprefix', default=None, type=str, help='Optional prefix for output filename.')
    parser.add_argument('-o', '--outdir', default='.', type=str, help='Full path to desired output directory.')
    
    parser.add_argument('fastfitfile', nargs=1, help='Full path to fastspec or fastphot fitting results.')
    
    if options is None:
        args = parser.parse_args()
        log.info(' '.join(sys.argv))
    else:
        args = parser.parse_args(options)
        log.info('fastspecfit-qa {}'.format(' '.join(options)))

    return args

def main(args=None, comm=None):
    """Main module.

    """
    import fitsio
    from astropy.table import Table
    from fastspecfit.continuum import ContinuumFit
    from fastspecfit.emlines import EMLineFit
    from fastspecfit.fastspecfit import _desiqa_one, desiqa_one
    from fastspecfit.io import DESISpectra, read_fastspecfit, DESI_ROOT_NERSC, select

    if isinstance(args, (list, tuple, type(None))):
        args = parse(args)

    if args.redux_dir is None:
        args.redux_dir = os.path.join(os.environ.get('DESI_ROOT', DESI_ROOT_NERSC), 'spectro', 'redux')
        if not os.path.isdir(args.redux_dir):
            errmsg = 'Data reduction directory {} not found.'.format(args.redux_dir)
            log.critical(errmsg)
            raise IOError(errmsg)
    
    # Read the fitting results.
    if not os.path.isfile(args.fastfitfile[0]):
        log.warning('File {} not found.'.format(args.fastfitfile[0]))
        return

    fastfit, metadata, coadd_type, isfastphot = read_fastspecfit(args.fastfitfile[0])
    if args.webqa:
        # This is not great coding, but when building the webqa, assume that a
        # companion fastphot- file exists and, if not, quit.
        fastphotfile = args.fastfitfile[0].replace('fastspec-', 'fastphot-').replace('.gz', '')
        if not os.path.isfile(fastphotfile):
            errmsg = '--webqa fastphot file {} not found.'.format(fastphotfile)
            log.critical(errmsg)
            raise IOError(errmsg)
        
        fastphot, _, _, _ = read_fastspecfit(fastphotfile)
        if not np.all(fastfit['TARGETID'] == fastphot['TARGETID']):
            errmsg = 'Mismatch in fastspec and fastphot TARGETIDs'
            log.critical(errmsg)
            raise Valuerror(errmsg)
        
    # parse the targetids optional input
    if args.targetids:
        targetids = [int(x) for x in args.targetids.split(',')]
        keep = np.where(np.isin(fastfit['TARGETID'], targetids))[0]
        if len(keep) == 0:
            log.warning('No matching targetids found!')
            return
        fastfit = fastfit[keep]
        metadata = metadata[keep]
        if args.webqa:
            fastphot = fastphot[keep]
        
    if args.ntargets is not None:
        keep = np.arange(args.ntargets) + args.firsttarget
        log.info('Keeping {} targets.'.format(args.ntargets))
        fastfit = fastfit[keep]
        metadata = metadata[keep]
        if args.webqa:
            fastphot = fastphot[keep]

    if args.webqa:
        keep = select(fastfit, metadata, coadd_type, healpixels=args.healpix,
                      tiles=args.tile, nights=args.night, return_index=True)
        fastfit = fastfit[keep]
        metadata = metadata[keep]
        fastphot = fastphot[keep]
    else:
        fastfit, metadata = select(fastfit, metadata, coadd_type, healpixels=args.healpix,
                                   tiles=args.tile, nights=args.night)
        
    if coadd_type == 'custom' and args.redrockfiles is None:
        errmsg = 'redrockfiles input is required if coadd_type==custom'
        log.critical(errmsg)
        raise IOError(errmsg)

    # Initialize the continuum- and emission-line fitting classes.
    t0 = time.time()
    CFit = ContinuumFit(nolegend=args.nolegend, mapdir=args.mapdir)
    EMFit = EMLineFit(nolegend=args.nolegend, mapdir=args.mapdir)
    Spec = DESISpectra(redux_dir=args.redux_dir, dr9dir=args.dr9dir)
    log.info('Initializing the classes took: {:.2f} sec'.format(time.time()-t0))

    if args.outdir:
        if not os.path.isdir(args.outdir):
            os.makedirs(args.outdir, exist_ok=True)

    def _wrap_qa(redrockfile, indx=None):
        if indx is None:
            indx = np.arange(len(fastfit))
        targetids = fastfit['TARGETID'][indx]
        Spec.select(redrockfiles=redrockfile, targetids=targetids,
                    redrockfile_prefix=args.redrockfile_prefix,
                    specfile_prefix=args.specfile_prefix,
                    qnfile_prefix=args.qnfile_prefix)
        data = Spec.read_and_unpack(CFit, fastphot=isfastphot, synthphot=True)

        pdb.set_trace()
        
        qaargs = [(CFit, EMFit, data[igal], fastfit[indx[igal]], metadata[indx[igal]],
                   coadd_type, isfastphot, args.outdir, args.outprefix) for igal in np.arange(len(indx))]                

        if args.mp > 1:
            import multiprocessing
            with multiprocessing.Pool(args.mp) as P:
                P.map(_desiqa_one, qaargs)
        else:
            [desiqa_one(*_qaargs) for _qaargs in qaargs]

    t0 = time.time()
    if coadd_type == 'healpix':
        allspecprods = metadata['SPECPROD'].data
        allsurveys = metadata['SURVEY'].data
        allprograms = metadata['PROGRAM'].data
        allpixels = metadata['HEALPIX'].data
        for specprod in set(allspecprods):
            for survey in set(allsurveys):
                for program in set(allprograms):
                    for pixel in set(allpixels):
                        indx = np.where((specprod == allspecprods) * (survey == allsurveys) *
                                        (program == allprograms) * (pixel == allpixels))[0]
                        if len(indx) == 0:
                            #log.warning('No object found with specprod={}, survey={}, program={}, and healpixel={}!'.format(
                            #    specprod, survey, program, pixel))
                            continue
                        redrockfile = os.path.join(args.redux_dir, specprod, 'healpix', str(survey), str(program), str(pixel // 100), 
                                                   str(pixel), 'redrock-{}-{}-{}.fits'.format(survey, program, pixel))
                        _wrap_qa(redrockfile, indx)
    elif coadd_type == 'custom':
        for redrockfile in args.redrockfiles:
            _wrap_qa(redrockfile)
    else:
        allspecprods = metadata['SPECPROD'].data
        alltiles = metadata['TILEID'].astype(str).data
        allnights = metadata['NIGHT'].astype(str).data
        allpetals = metadata['FIBER'].data // 500
        if coadd_type == 'cumulative':
            for specprod in set(allspecprods):
                for tile in set(alltiles):
                    for petal in set(allpetals):
                        indx = np.where((specprod == allspecprods) * (tile == alltiles) * (petal == allpetals))[0]
                        if len(indx) == 0:
                            #log.warning('No object found with tileid={} and petal={}!'.format(
                            #    tile, petal))
                            continue
                        redrockfile = os.path.join(args.redux_dir, specprod, 'tiles', 'cumulative', str(tile), allnights[indx[0]],
                                                   'redrock-{}-{}-thru{}.fits'.format(petal, tile, allnights[indx[0]]))
                        _wrap_qa(redrockfile, indx)
        elif coadd_type == 'pernight':
            for specprod in set(allspecprods):
                for night in set(allnights):
                    for tile in set(alltiles):
                        for petal in set(allpetals):
                            indx = np.where((specprod == allspecprods) * (night == allnights) *
                                            (tile == alltiles) * (petal == allpetals))[0]
                            if len(indx) == 0:
                                continue
                            redrockfile = os.path.join(args.redux_dir, specprod, 'tiles', 'pernight', str(tile), str(night),
                                                       'redrock-{}-{}-{}.fits'.format(petal, tile, night))
                            _wrap_qa(redrockfile, indx)
        elif coadd_type == 'perexp':
            allexpids = metadata['EXPID'].data
            for specprod in set(allspecprods):
                for night in set(allnights):
                    for expid in set(allexpids):
                        for tile in set(alltiles):
                            for petal in set(allpetals):
                                indx = np.where((specprod == allspecprods) * (night == allnights) *
                                                (expid == allexpids) * (tile == alltiles) *
                                                (petal == allpetals))[0]
                                if len(indx) == 0:
                                    continue
                                redrockfile = os.path.join(args.redux_dir, specprod, 'tiles', 'perexp', str(tile), '{:08d}'.format(expid), 
                                                           'redrock-{}-{}-exp{:08d}.fits'.format(petal, tile, expid))
                                _wrap_qa(redrockfile, indx)
                                
    log.info('QA for everything took: {:.2f} sec'.format(time.time()-t0))

if __name__ == '__main__':
    main()
    
