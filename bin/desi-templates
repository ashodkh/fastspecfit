#!/usr/bin/env python
"""Build spectroscopic templates.

"""
import pdb # for debugging
import os, sys, time
import numpy as np
import fitsio
from astropy.table import Table

from desiutil.log import get_logger
log = get_logger()

templatedir = os.path.join(os.getenv('DESI_ROOT'), 'users', 'ioannis', 'desi-templates')

def parse(options=None):
    """Parse input arguments.

    """
    import sys, argparse

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--specprod', type=str, default='denali', choices=['denali', 'cascades', 'daily'],
                        help='Spectroscopic production to process.')
    parser.add_argument('--targetclass', type=str, default='lrg', choices=['lrg', 'elg', 'bgs', 'qso'],
                        help='Target class to analyze.')

    parser.add_argument('--mp', type=int, default=1, help='Number of multiprocessing processes per MPI rank or node.')
    parser.add_argument('--minperbin', type=int, default=3, help='Minimum number of galaxies per bin.')

    parser.add_argument('--minwave', type=float, default=500.0, help='Minimum output wavelength of stacked continuum spectra.')
    parser.add_argument('--maxwave', type=float, default=6e4, help='Maximum output wavelength of stacked continuum spectra.')
    parser.add_argument('--min-efftime', type=float, default=5.0, help='Minimum effective time to keep a tile (min).')

    parser.add_argument('-o', '--outdir', default=None, type=str, help='Full path to desired output directory.')
    parser.add_argument('--overwrite-stacks', action='store_true', help='Overwrite existing stacked spectra output files.')
    parser.add_argument('--overwrite-fastspec', action='store_true', help='Overwrite existing fastspec fitting results.')
    parser.add_argument('--overwrite-templates', action='store_true', help='Overwrite existing templates.')

    parser.add_argument('--qa', action='store_true', help='Build QA output for a given target class.')
    
    if options is None:
        args = parser.parse_args()
        log.info(' '.join(sys.argv))
    else:
        args = parser.parse_args(options)
        log.info('fastspecfit-html {}'.format(' '.join(options)))

    return args

def main(args=None, comm=None):
    """Wrapper for building templates.

    """
    if isinstance(args, (list, tuple, type(None))):
        args = parse(args)

    log.info('Working on targetclass {}'.format(args.targetclass.upper()))

    stackfile = os.path.join(templatedir, '{}-stacks.fits'.format(args.targetclass))
    fastspecfile = os.path.join(templatedir, '{}-fastspec.fits'.format(args.targetclass))
    templatefile = os.path.join(templatedir, '{}-templates.fits'.format(args.targetclass))

    # Optionally build QA for every (existing) output file.
    if args.qa:
        from fastspecfit.templates.sample import read_tileinfo, read_fastspecfit, select_parent_sample

        # hacky
        from fastspecfit.templates.qa import qa_fastspec
        from fastspecfit.continuum import ContinuumFit
        from fastspecfit.emlines import EMLineFit
    
        CFit = ContinuumFit(minwave=args.minwave, maxwave=args.maxwave)
        EMFit = EMLineFit()

        png = os.path.join(templatedir, 'qa', '{}-fastspec.png'.format(args.targetclass))        
        qa_fastspec(fastspecfile, CFit, EMFit, png=png)
        
        pdb.set_trace()

        # Read the master tile file and the fastspecfit fitting results and
        # select the parent sample.
        png = os.path.join(templatedir, 'qa', '{}-tiles.png'.format(args.targetclass))
        tileinfo = read_tileinfo(args.targetclass, min_efftime=args.min_efftime,
                                 remove_vi=True, specprod=args.specprod, png=png)
        allphot, allspec, allmeta = read_fastspecfit(tileinfo, targetclass=args.targetclass,
                                                     specprod=args.specprod)

        png = os.path.join(templatedir, 'qa', '{}-parent.png'.format(args.targetclass))
        phot, spec, meta = select_parent_sample(allphot, allspec, allmeta, png=png,
                                                targetclass=args.targetclass, verbose=True)
        
        if args.targetclass == 'lrg':
            from fastspecfit.templates.templates import lrg_stacking_bins
            from fastspecfit.templates.qa import qa_photometry_lrg

            bins, nbins = lrg_stacking_bins(verbose=True)
        
            png_obs = os.path.join(templatedir, 'qa', '{}-obs.png'.format(args.targetclass))
            png_rest = os.path.join(templatedir, 'qa', '{}-rest.png'.format(args.targetclass))
            png_rest_bins = os.path.join(templatedir, 'qa', '{}-rest-bins.png'.format(args.targetclass))

            qa_photometry_lrg(phot, spec, meta, bins=bins, png_obs=png_obs,
                              png_rest=png_rest, png_rest_bins=png_rest_bins)
                              
        return

    # [1] Build the stacked spectra.
    if not os.path.isfile(stackfile) or args.overwrite_stacks:
        log.info('Building stacked spectra in bins of properties.')

        from fastspecfit.continuum import ContinuumFit
        from fastspecfit.templates.templates import stack_in_bins
        from fastspecfit.templates.sample import (read_tileinfo, read_fastspecfit,
                                                  select_parent_sample, spectra_in_bins)
        
        if args.targetclass == 'lrg':
            from fastspecfit.templates.templates import lrg_stacking_bins
            bins, nbins = lrg_stacking_bins(verbose=True)
            
        # Read the master tile file and the fastspecfit fitting results and
        # select the parent sample.
        tileinfo = read_tileinfo(args.targetclass, min_efftime=args.min_efftime,
                                 remove_vi=True, specprod=args.specprod)
        allphot, allspec, allmeta = read_fastspecfit(tileinfo, targetclass=args.targetclass,
                                                     specprod=args.specprod)
        phot, spec, meta = select_parent_sample(allphot, allspec, allmeta, 
                                                targetclass=args.targetclass)
        
        # select spectra in bins of properties, looping over all tiles
        CFit = ContinuumFit(minwave=args.minwave, maxwave=args.maxwave)
        sample, data, restwave = spectra_in_bins(tileinfo, targetclass=args.targetclass,
                                                 bins=bins, minperbin=args.minperbin,
                                                 CFit=CFit, verbose=False)
        
        stack_in_bins(sample, data, restwave, continuumwave=CFit.sspwave,
                      mp=args.mp, stackfile=stackfile)

    # [2] Model the stacked spectra using fastspecfit.
    if not os.path.isfile(fastspecfile) or args.overwrite_fastspec:
        from fastspecfit.templates.templates import fastspecfit_stacks

        log.info('Modeling stacked spectra using fastspec.')

        qadir = os.path.join(templatedir, 'qa')
        fastspecfit_stacks(stackfile, mp=args.mp, fastspecfile=fastspecfile,
                           qadir=qadir, qaprefix=args.targetclass)

    # [3] Generate the final templates and then we're done!
    if not os.path.isfile(templatefile) or args.overwrite_templates:
        from fastspecfit.templates.templates import build_templates

        log.info('Building final templates.')
        build_templates(fastspecfile, mp=args.mp, minwave=args.minwave,
                        maxwave=args.maxwave, templatefile=templatefile)

        pdb.set_trace()

    # FITS file with 3 HDUs:
    
    # FLUX[n,m] - n restframe templates sampled at m wavelengths
    
    # WEIGHTS[n,m] - weights for FLUX; note that weights can be both template
    # and wavelength dependent.  Set to 0 for wavelengths that should not be
    # trusted for this template.  As a starting point let's try the non-zeros
    # weights being the number of input spectra that contributed to the
    # template.  We may need to try a S/N weighted version of that.  We could
    # also try something like only masking (weight=0) around the emission lines
    # that are not within the DESI wavelengths, while still trusting the
    # extrapolation of the continuum.  Feel free to send several versions to try
    # if you'd like.
    
    # WAVELENGTH[m] - not needed for empca, but needed for redrock to interpret the PCA results

if __name__ == '__main__':
    main()
    
